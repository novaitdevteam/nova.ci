name: CI Build NTK on Push
on:
  workflow_call:

jobs:
  linter:
    name: Linter
    runs-on: self-hosted
    environment: ${{ inputs.environment }}
    outputs:
      LINTER_CHECK: ${{ steps.linter_res.outputs.LINTER_CHECK }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: üíø Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      # ======== novatalks.core: npm ci + npm run lint ========
      - name: ‚ñ∂Ô∏è Install deps (npm ci) ‚Äî novatalks.core
        if: ${{ github.event.repository.name == 'novatalks.core' }}
        run: npm ci

      - name: üá™üá∏ Lint (npm run lint) ‚Äî novatalks.core
        id: linter
        if: ${{ github.event.repository.name == 'novatalks.core' }}
        run: npm run lint

      # ======== any repo: work now ========
      - name: Setup yarn ‚Äî other repos
        if: ${{ github.event.repository.name != 'novatalks.core' }}
        run: npm install -g yarn

      - name: ‚ñ∂Ô∏è Install Node.js dependencies ‚Äî other repos
        if: ${{ github.event.repository.name != 'novatalks.core' }}
        run: |
          yarn add eslint-plugin-security
          yarn add @typescript-eslint/eslint-plugin

      - name: üá™üá∏ Lint SRC ‚Äî other repos
        id: linter_other
        if: ${{ github.event.repository.name != 'novatalks.core' }}
        run: npx eslint --ext .js,.vue,.ts . --quiet

      # ======== end ========
      - name: End Linter Step
        if: success() || failure()
        id: linter_res
        run: |
          if [[ "${{ steps.linter.outcome || steps.linter_other.outcome }}" == "success" ]]; then
            echo "LINTER_CHECK=‚úÖ" | tee -a $GITHUB_OUTPUT
          else
            echo "LINTER_CHECK=‚ùå" | tee -a $GITHUB_OUTPUT
          fi

  build-image:
    name: Build Image
    runs-on: self-hosted
    environment: ${{ inputs.environment }}
    # permissions:
    #   contents: read
    #   packages: write
    if: always()
    needs: [linter]
    outputs:
      REP_NAME: ${{ steps.prep.outputs.REP_NAME }}
      SHORT_SHA: ${{ steps.prep.outputs.SHORT_SHA }} 
      SHORT_REF_NAME: ${{ steps.prep.outputs.SHORT_REF_NAME }}
      RELEASE: ${{ steps.prep.outputs.RELEASE }}
      END_STEP_JOB_ID: ${{ steps.end_step.outputs.END_STEP_JOB_ID }}
      IMAGE_SUFFIX: ${{ steps.set_dockerfile.outputs.IMAGE_SUFFIX }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare Vars
        id: prep
        run: |
          echo "REP_NAME=`echo ${GITHUB_REPOSITORY} | cut -d "/" -f2 `" | tee -a $GITHUB_ENV $GITHUB_OUTPUT
          echo "SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-8`" | tee -a $GITHUB_ENV $GITHUB_OUTPUT
          echo "RELEASE=`echo $(date +'%Y_R%q')`" | tee -a $GITHUB_ENV $GITHUB_OUTPUT
          if [[ ${{ github.ref_type }} == 'branch' ]]; then
            echo "SHORT_REF_NAME=`echo ${{ github.ref_name }}`" | tee -a $GITHUB_ENV $GITHUB_OUTPUT
          else
            echo "SHORT_REF_NAME=`echo ${{ github.event.base_ref }} | cut -d "/" -f3`" | tee -a $GITHUB_ENV $GITHUB_OUTPUT
          fi


      - name: Delete Tag
        uses: dev-drprasad/delete-tag-and-release@v0.2.1
        with:
          #delete_release: false # default: false
          tag_name: ${{ github.ref_name }} # tag name to delete
          #repo: ${{ github.repository_owner }}/${{ env.REP_NAME }} # target repo (optional). defaults to repo running this action
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}         

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          #username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to DockerHub Container Registry 
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.CR_DH_USERNAME }}
          password: ${{ secrets.CR_DH_TOKEN }}


      - name: Set up Docker Context for Buildx
        id: buildx-context
        run: |
          docker context create builder

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          endpoint: builder
          buildkitd-flags: --debug
 
      - name: Set Dockerfile path and image suffix
        id: set_dockerfile
        run: |
          if [[ "${{ github.ref_name }}" == "build-engine" ]]; then
            echo "DOCKERFILE_PATH=./docker/engine.Dockerfile" >> $GITHUB_ENV
            echo "IMAGE_SUFFIX=_engine" >> $GITHUB_ENV
            echo "IMAGE_SUFFIX=_engine" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref_name }}" == "build-reporting" ]]; then
            echo "DOCKERFILE_PATH=./docker/reporting.Dockerfile" >> $GITHUB_ENV
            echo "IMAGE_SUFFIX=_reporting" >> $GITHUB_ENV
            echo "IMAGE_SUFFIX=_reporting" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref_name }}" == "build-restore-historical" ]]; then
            echo "DOCKERFILE_PATH=./docker/restore-historical.Dockerfile" >> $GITHUB_ENV
            echo "IMAGE_SUFFIX=_restore-historical" >> $GITHUB_ENV
            echo "IMAGE_SUFFIX=_restore-historical" >> $GITHUB_OUTPUT
          else
            echo "DOCKERFILE_PATH=./docker/server.Dockerfile" >> $GITHUB_ENV
            echo "IMAGE_SUFFIX=" >> $GITHUB_ENV
            echo "IMAGE_SUFFIX=" >> $GITHUB_OUTPUT
          fi


      - name: Build and push
        uses: docker/build-push-action@v5
        id: main_build_proc
        with:
          context: .
          file: ${{ env.DOCKERFILE_PATH }}
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          target: main
          secrets: ${{ github.ref_name == 'build-engine' && format('geoip_license={0}', secrets.LICENSE_KEY_GEO_IP) || '' }}
          tags: | 
            ${{ secrets.CR_DH_USERNAME }}/${{ env.REP_NAME }}:${{ env.RELEASE }}_${{ env.SHORT_REF_NAME }}_${{ env.SHORT_SHA }}${{ env.IMAGE_SUFFIX }}
            ghcr.io/${{ github.repository_owner }}/${{ env.REP_NAME }}:${{ env.RELEASE }}_${{ env.SHORT_REF_NAME }}_${{ env.SHORT_SHA }}${{ env.IMAGE_SUFFIX }}

      - name: Add latest tag on master DOCKER
        if: ${{ contains( github.event.base_ref, 'master' ) }}
        run: |
          docker buildx imagetools create \
            --tag ${{ secrets.CR_DH_USERNAME }}/${{ env.REP_NAME }}:latest \
            ${{ secrets.CR_DH_USERNAME }}/${{ env.REP_NAME }}:${{ env.RELEASE }}_${{ env.SHORT_REF_NAME }}_${{ env.SHORT_SHA }}${{ env.IMAGE_SUFFIX }} 

      - name: Add latest tag on master GHCR
        if: ${{ contains( github.event.base_ref, 'master' ) }}
        run: |
          docker buildx imagetools create \
            --tag ghcr.io/${{ github.repository_owner }}/${{ env.REP_NAME }}:latest \
            ghcr.io/${{ github.repository_owner }}/${{ env.REP_NAME }}:${{ env.RELEASE }}_${{ env.SHORT_REF_NAME }}_${{ env.SHORT_SHA }}${{ env.IMAGE_SUFFIX }}

      - name: End Step On Failure
        if: failure()
        id: end_step
        run: echo "END_STEP_JOB_ID=`echo ${{ github.run_id }}`" | tee -a $GITHUB_OUTPUT        

  notify-telegram:
    name: Notifier
    runs-on: self-hosted
    if: always()
    needs: [build-image, linter]
    steps:

      - name: Set Telegram Message
        uses: haya14busa/action-cond@v1
        id: telegram_message
        with:
          cond: ${{ contains(join(needs.build-image.result, ','), 'success') }}
          if_true: |
            üë∑ ${{ github.actor }} created deploy tag.
            
            Image building has been completed ‚úÖ
            
            ‚ñ∂Ô∏è GitHub Public Registry: ghcr.io/${{ github.repository_owner }}/${{ needs.build-image.outputs.REP_NAME }}
            üîó docker pull ghcr.io/${{ github.repository_owner }}/${{ needs.build-image.outputs.REP_NAME }}:${{ needs.build-image.outputs.RELEASE }}_${{ needs.build-image.outputs.SHORT_REF_NAME }}_${{ needs.build-image.outputs.SHORT_SHA }}${{ needs.build-image.outputs.IMAGE_SUFFIX }}

            ‚ñ∂Ô∏è Docker Private Registry: ${{ secrets.CR_DH_USERNAME }}/${{ needs.build-image.outputs.REP_NAME }}
            üîó docker pull docker.io/${{ secrets.CR_DH_USERNAME }}/${{ needs.build-image.outputs.REP_NAME }}:${{ needs.build-image.outputs.RELEASE }}_${{ needs.build-image.outputs.SHORT_REF_NAME }}_${{ needs.build-image.outputs.SHORT_SHA }}${{ needs.build-image.outputs.IMAGE_SUFFIX }}

            üîµ Image Name: ${{ needs.build-image.outputs.RELEASE }}_${{ needs.build-image.outputs.SHORT_REF_NAME }}_${{ needs.build-image.outputs.SHORT_SHA }}${{ needs.build-image.outputs.IMAGE_SUFFIX }}

            ESLinter Check Status: ${{ needs.linter.outputs.LINTER_CHECK }}

            Repository: ${{ github.repository }}  
            See changes: https://github.com/${{ github.repository }}/commit/${{github.sha}}
          if_false: |
            üë∑ ${{ github.actor }} created deploy tag.
            
            ‚ùåBuild Failed
            
            ESLinter Check Status: ${{ needs.linter.outputs.LINTER_CHECK }}

            üîó See Details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ needs.build-image.outputs.END_STEP_JOB_ID}}
            Repository: ${{ github.repository }}  
    
      - name: Send to Telegram
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TG_NOTIFICATION_BOT_ID }}
          token: ${{ secrets.TG_NOTIFICATION_BOT_TOKEN }}
          message: ${{ steps.telegram_message.outputs.value }}

      - name: Send Message To GChat
        uses: actions/github-script@v7 
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          debug: 'true'
          script: |
            async function webhook() {
              const url = "${{ secrets.GC_NOTIFICATION_WEBHOOK }}"
              const res = await fetch(url, {
                method: "POST",
                headers: {"Content-Type": "application/json; charset=UTF-8"},
                body: JSON.stringify({text: `${{ steps.telegram_message.outputs.value }}`})
              });
              return await res.json();
            }
            
            webhook();

